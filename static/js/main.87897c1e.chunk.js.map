{"version":3,"sources":["components/GlobalStyles.js","assets/button-start.png","assets/button-start-hover.png","components/Home.js","data/levelsData.js","components/Game.js","assets/levelselectscreen.png","assets/levelicon.png","assets/leveliconhover.png","components/SelectLevel.js","components/App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Home","Page","Title","Desc","StyledLink","to","styled","div","h1","p","Link","StartGameBtn","StartGameBtnHover","levelsData","lev1","rows","cols","lev2","lev3","lev4","lev5","lev6","Game","level","useParams","useState","cards","setCards","clicks","setClicks","cardsAmount","useEffect","init","setTimeout","prevState","map","card","visible","clickHandler","newCards","generateCards","appendColorsToCards","result","i","push","id","active","background","ids","randomCard1","Math","floor","random","length","randomCardId1","filter","item","index","randomCard2","randomCardId2","color","generateColor","r","g","b","e","currentClicks","newCardsState","target","checkAreCardsEqual","visibleCards","Wrapper","Card","size","bgColor","className","onClick","undefined","props","SelectLevel","player","history","useHistory","goToGame","Background","src","LevelSelectScreen","Levels","progress","Button","value","img","button","LevelIcon","LevelIconHover","nickname","passed","score","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87897c1e.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Open-Sans, Helvetica, Sans-Serif;\r\n    box-sizing: border-box;\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n  body {\r\n    background: radial-gradient(rgba(43, 55, 96, 1), rgba(11, 16, 35, 1));\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export default __webpack_public_path__ + \"static/media/button-start.6ff5d47d.png\";","export default __webpack_public_path__ + \"static/media/button-start-hover.867264d5.png\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport StartGameBtn from \"./../assets/button-start.png\";\r\nimport StartGameBtnHover from \"./../assets/button-start-hover.png\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Page>\r\n      <Title>\r\n        <span>M</span>emory <span>g</span>ame\r\n      </Title>\r\n      <Desc>Graj i ćwicz swoją pamięć!</Desc>\r\n      <StyledLink to='/React-Memory-Game/levels'></StyledLink>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\nconst Page = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 42px;\r\n  letter-spacing: 2px;\r\n  color: #fff;\r\n  span {\r\n    color: red;\r\n  }\r\n`;\r\n\r\nconst Desc = styled.p`\r\n  font-size: 24px;\r\n  color: #fff;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  display: block;\r\n  width: 200px;\r\n  height: 98px;\r\n  background-image: ${`url(${StartGameBtn})`};\r\n  background-position: center;\r\n  background-size: cover;\r\n  transition: background-image 0.2s linear;\r\n  :hover {\r\n    background-image: ${`url(${StartGameBtnHover})`};\r\n  }\r\n`;\r\n","const levelsData = {\r\n  lev1: {\r\n    rows: 2,\r\n    cols: 2,\r\n  },\r\n  lev2: {\r\n    rows: 2,\r\n    cols: 3,\r\n  },\r\n  lev3: {\r\n    rows: 3,\r\n    cols: 4,\r\n  },\r\n  lev4: {\r\n    rows: 4,\r\n    cols: 4,\r\n  },\r\n  lev5: {\r\n    rows: 5,\r\n    cols: 4,\r\n  },\r\n  lev6: {\r\n    rows: 6,\r\n    cols: 4,\r\n  },\r\n};\r\n\r\nexport default levelsData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport levelsData from \"./../data/levelsData\";\r\n\r\nfunction Game() {\r\n  const { level } = useParams();\r\n  const [cards, setCards] = useState([]);\r\n  const [clicks, setClicks] = useState(0);\r\n  const { rows, cols } = levelsData[level];\r\n  const cardsAmount = rows * cols;\r\n\r\n  useEffect(() => {\r\n    init();\r\n    setTimeout(() => {\r\n      setCards((prevState) =>\r\n        prevState.map((card) => ({\r\n          ...card,\r\n          visible: false,\r\n          clickHandler: true,\r\n        }))\r\n      );\r\n    }, 1000);\r\n  }, []);\r\n\r\n  const init = () => {\r\n    const newCards = generateCards();\r\n    appendColorsToCards(newCards);\r\n    setCards(newCards);\r\n  };\r\n\r\n  const generateCards = () => {\r\n    const result = [];\r\n    for (let i = 0; i < cardsAmount; i++) {\r\n      result.push({\r\n        id: i,\r\n        visible: true,\r\n        clickHandler: false,\r\n        active: true,\r\n        background: \"\",\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const appendColorsToCards = (cards) => {\r\n    let ids = cards;\r\n    for (let i = 0; i < cardsAmount / 2; i++) {\r\n      const randomCard1 = Math.floor(Math.random() * ids.length);\r\n      const randomCardId1 = ids[randomCard1].id;\r\n      ids = ids.filter((item, index) => index !== randomCard1);\r\n      const randomCard2 = Math.floor(Math.random() * ids.length);\r\n      const randomCardId2 = ids[randomCard2].id;\r\n      ids = ids.filter((item, index) => index !== randomCard2);\r\n      const color = generateColor();\r\n      cards[randomCardId1].background = color;\r\n      cards[randomCardId2].background = color;\r\n    }\r\n  };\r\n\r\n  const generateColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  };\r\n\r\n  const clickHandler = (e) => {\r\n    const currentClicks = clicks + 1;\r\n    const newCardsState = cards.map((card) => {\r\n      if (card.id == e.target.id) {\r\n        return { ...card, visible: true, clickHandler: false };\r\n      } else {\r\n        return card;\r\n      }\r\n    });\r\n\r\n    if (currentClicks === 1 || currentClicks === 2) {\r\n      setClicks(currentClicks);\r\n      setCards(newCardsState);\r\n      currentClicks === 2 && checkAreCardsEqual(newCardsState);\r\n    }\r\n  };\r\n\r\n  const checkAreCardsEqual = (newCardsState) => {\r\n    const visibleCards = newCardsState.filter((card) => card.visible);\r\n    const result =\r\n      visibleCards[0].background === visibleCards[1].background ? true : false;\r\n\r\n    setTimeout(() => {\r\n      setCards(\r\n        newCardsState.map((card) => {\r\n          if (card.visible && result) {\r\n            return {\r\n              ...card,\r\n              clickHandler: false,\r\n              visible: false,\r\n              active: false,\r\n            };\r\n          } else if (card.visible && !result) {\r\n            return { ...card, clickHandler: true, visible: false };\r\n          } else {\r\n            return card;\r\n          }\r\n        })\r\n      );\r\n      setClicks(0);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {cards.map((card) => (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          size={cols}\r\n          bgColor={\r\n            !card.active\r\n              ? \"rgba(0, 0, 0, 0.7)\"\r\n              : !card.visible\r\n              ? \"gray\"\r\n              : card.background\r\n          }\r\n          className={card.visible && \"visible\"}\r\n          onClick={card.clickHandler ? clickHandler : undefined}\r\n        />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  cursor: pointer;\r\n  flex-basis: ${(props) => 100 / props.size}%;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  border: 4px solid white;\r\n  border-radius: 10px;\r\n  transform: rotate3d(0, 1, 0, 0deg);\r\n  transition: transform 0.4s linear, background-color 0s linear 0.2s;\r\n  background-color: ${(props) => props.bgColor};\r\n  &.visible {\r\n    transform: rotate3d(0, 1, 0, 180deg);\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/levelselectscreen.a4eb90f8.png\";","export default __webpack_public_path__ + \"static/media/levelicon.c089b3bb.png\";","export default __webpack_public_path__ + \"static/media/leveliconhover.2e9da042.png\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LevelSelectScreen from \"./../assets/levelselectscreen.png\";\r\nimport LevelIcon from \"./../assets/levelicon.png\";\r\nimport LevelIconHover from \"./../assets/leveliconhover.png\";\r\n\r\nconst SelectLevel = ({ player }) => {\r\n  const history = useHistory();\r\n\r\n  const goToGame = (e) => {\r\n    history.push(`/React-Memory-Game/game/${e.target.id}`);\r\n  };\r\n  return (\r\n    <Page>\r\n      <Wrapper>\r\n        <Background src={LevelSelectScreen} />\r\n        <Levels>\r\n          {player.progress.map((level) => (\r\n            <Button\r\n              key={level.level}\r\n              id={`lev${level.level}`}\r\n              value={level.level}\r\n              onClick={goToGame}\r\n            />\r\n          ))}\r\n        </Levels>\r\n      </Wrapper>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default SelectLevel;\r\n\r\nconst Page = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Background = styled.img`\r\n  max-width: 100%;\r\n`;\r\n\r\nconst Levels = styled.div`\r\n  position: absolute;\r\n  top: 55%;\r\n  left: 50%;\r\n  width: 42%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 800px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: transparent;\r\n  background-image: ${`url(${LevelIcon})`};\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  border: none;\r\n  color: #fff;\r\n  flex-basis: 33%;\r\n  padding-top: 33%;\r\n  margin: 10px 0px;\r\n  position: relative;\r\n  :hover,\r\n  :focus {\r\n    background-image: ${`url(${LevelIconHover})`};\r\n    outline: none;\r\n  }\r\n  &:before {\r\n    content: ${(props) => `\"${props.value}\"`};\r\n    font-size: 30px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport GlobalStyle from \"./GlobalStyles\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Game from \"./Game\";\nimport SelectLevel from \"./SelectLevel\";\n\nconst player = {\n  nickname: \"player1\",\n  progress: [\n    {\n      level: 1,\n      passed: true,\n      score: 5,\n    },\n    {\n      level: 2,\n      passed: true,\n      score: 15,\n    },\n    {\n      level: 3,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 4,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 5,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 6,\n      passed: false,\n      score: null,\n    },\n  ],\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <GlobalStyle />\n        <Switch>\n          <Route exact path='/React-Memory-Game'>\n            <Home />\n          </Route>\n          <Route exact path='/React-Memory-Game/levels'>\n            <SelectLevel player={player} />\n          </Route>\n          <Route exact path='/React-Memory-Game/game/:level'>\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}