{"version":3,"sources":["components/GlobalStyles.js","components/withScale.js","assets/button-start.png","assets/button-start-hover.png","assets/button-plus.png","assets/button-plus-hover.png","assets/title.png","components/Home.js","data/levelsData.js","components/Game.js","assets/levelselectscreen.png","assets/levelicon.png","assets/leveliconhover.png","components/SelectLevel.js","components/App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","withScale","WrappedComponent","props","useState","scale","Math","min","window","innerWidth","innerHeight","setScale","useEffect","addEventListener","calculateScale","removeEventListener","e","player","setUserData","value","error","textField","setTextField","history","useHistory","Page","Wrapper","Title","nickname","NickName","Button","variant","onClick","push","Input","type","placeholder","onChange","target","onBlur","formattedValue","trim","charAt","toUpperCase","slice","styled","div","HomeScreen","h1","h2","input","button","AddBtn","StartGameBtn","AddBtnHover","StartGameBtnHover","levelsData","lev1","rows","cols","lev2","lev3","lev4","lev5","lev6","Game","level","useParams","cards","setCards","clicks","setClicks","cardsAmount","init","setTimeout","prevState","map","card","visible","clickHandler","newCards","generateCards","appendColorsToCards","result","i","id","active","background","ids","randomCard1","floor","random","length","randomCardId1","filter","item","index","randomCard2","randomCardId2","color","generateColor","r","g","b","currentClicks","newCardsState","checkAreCardsEqual","visibleCards","Card","size","bgColor","className","undefined","goToGame","Levels","amount","ceil","progress","LevelSelectScreen","LevelIcon","LevelIconHover","initialPlayerData","passed","score","App","data","JSON","parse","localStorage","getItem","setPlayer","exact","path","newState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d9e1b0d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Poppins', sans-serif;\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst withScale = (WrappedComponent) => {\r\n  const WithScale = (props) => {\r\n    const [scale, setScale] = useState(() => {\r\n      const scale = Math.min(\r\n        window.innerWidth / 1273,\r\n        window.innerHeight / 716\r\n      );\r\n      return scale > 1 ? 1 : scale;\r\n    });\r\n\r\n    useEffect(() => {\r\n      window.addEventListener(\"resize\", calculateScale);\r\n      return () => {\r\n        window.removeEventListener(\"resize\", calculateScale);\r\n      };\r\n    }, []);\r\n\r\n    const calculateScale = (e) => {\r\n      const scale = Math.min(\r\n        window.innerWidth / 1273,\r\n        window.innerHeight / 716\r\n      );\r\n      setScale(scale > 1 ? 1 : scale);\r\n    };\r\n\r\n    return <WrappedComponent {...props} scale={scale} />;\r\n  };\r\n\r\n  return WithScale;\r\n};\r\n\r\nexport default withScale;\r\n","export default __webpack_public_path__ + \"static/media/button-start.6ff5d47d.png\";","export default __webpack_public_path__ + \"static/media/button-start-hover.867264d5.png\";","export default __webpack_public_path__ + \"static/media/button-plus.38f15a9f.png\";","export default __webpack_public_path__ + \"static/media/button-plus-hover.bf7fe888.png\";","export default __webpack_public_path__ + \"static/media/title.c26b316f.png\";","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport withScale from \"./withScale\";\r\nimport StartGameBtn from \"./../assets/button-start.png\";\r\nimport StartGameBtnHover from \"./../assets/button-start-hover.png\";\r\nimport AddBtn from \"./../assets/button-plus.png\";\r\nimport AddBtnHover from \"./../assets/button-plus-hover.png\";\r\nimport HomeScreen from \"./../assets/title.png\";\r\n\r\nconst Home = ({ player, setUserData, scale }) => {\r\n  const [textField, setTextField] = useState({ value: \"\", error: false });\r\n  const history = useHistory();\r\n\r\n  const goToSelectLevel = () => {\r\n    history.push(\"/React-Memory-Game/levels\");\r\n  };\r\n\r\n  const formatter = () => {\r\n    const formattedValue =\r\n      textField.value.trim().charAt(0).toUpperCase() +\r\n      textField.value.trim().slice(1);\r\n\r\n    formattedValue\r\n      ? setTextField({ value: formattedValue, error: false })\r\n      : setTextField({ value: formattedValue, error: true });\r\n  };\r\n\r\n  const addUserNickname = () => {\r\n    if (textField.value) {\r\n      setTextField({ ...textField, error: false });\r\n      setUserData(textField.value);\r\n    } else {\r\n      setTextField({ ...textField, error: true });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Wrapper scale={scale}>\r\n        <Title>\r\n          <span>M</span>emory&nbsp;<span>G</span>ame\r\n        </Title>\r\n        {player.nickname ? (\r\n          <>\r\n            <NickName>Cześć {player.nickname}!</NickName>\r\n            <Button variant='StartGameBtn' onClick={goToSelectLevel} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Input\r\n              type='text'\r\n              placeholder='Wpisz swój nick...'\r\n              value={textField.value}\r\n              error={textField.error}\r\n              onChange={(e) =>\r\n                setTextField({ ...textField, value: e.target.value })\r\n              }\r\n              onBlur={formatter}\r\n            />\r\n            <Button variant='AddBtn' onClick={addUserNickname} />\r\n          </>\r\n        )}\r\n      </Wrapper>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default withScale(Home);\r\n\r\nconst Page = styled.div`\r\n  background: radial-gradient(rgba(43, 55, 96, 1), rgba(11, 16, 35, 1));\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1273px;\r\n  height: 716px;\r\n  transform: ${({ scale }) => `translate(-50%, -50%) scale(${scale})`};\r\n  background-image: ${`url(${HomeScreen})`};\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  & * {\r\n    margin: 10px 0;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 80px;\r\n  letter-spacing: 1px;\r\n  color: #af753b;\r\n  text-shadow: 0px 0px 2px black;\r\n  span {\r\n    color: #94bd00;\r\n  }\r\n`;\r\n\r\nconst NickName = styled.h2`\r\n  font-size: 50px;\r\n  color: #af753b;\r\n  text-shadow: 0px 0px 2px black;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 363px;\r\n  height: 60px;\r\n  border: ${(props) => (props.error ? \"6px solid red\" : \"6px solid #af753b\")};\r\n  border-radius: 12px;\r\n  background: transparent;\r\n  padding: 10px 5px;\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  color: #c58662;\r\n  :focus {\r\n    outline: none;\r\n    box-shadow: 0px 0px 10px #ffff04;\r\n  }\r\n  ::placeholder {\r\n    color: #c58662;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: ${({ variant }) => {\r\n    switch (true) {\r\n      case variant === \"AddBtn\":\r\n        return \"88px\";\r\n      case variant === \"StartGameBtn\":\r\n        return \"363px\";\r\n    }\r\n  }};\r\n  height: ${({ variant }) => {\r\n    switch (true) {\r\n      case variant === \"AddBtn\":\r\n        return \"88px\";\r\n      case variant === \"StartGameBtn\":\r\n        return \"178px\";\r\n    }\r\n  }};\r\n  background-color: transparent;\r\n  background-image: ${({ variant }) => {\r\n    switch (true) {\r\n      case variant === \"AddBtn\":\r\n        return `url(${AddBtn})`;\r\n      case variant === \"StartGameBtn\":\r\n        return `url(${StartGameBtn})`;\r\n    }\r\n  }};\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background-image 0.2s linear;\r\n  :hover,\r\n  :focus {\r\n    outline: none;\r\n    background-image: ${({ variant }) => {\r\n      switch (true) {\r\n        case variant === \"AddBtn\":\r\n          return `url(${AddBtnHover})`;\r\n        case variant === \"StartGameBtn\":\r\n          return `url(${StartGameBtnHover})`;\r\n      }\r\n    }};\r\n  }\r\n`;\r\n","const levelsData = {\r\n  lev1: {\r\n    rows: 2,\r\n    cols: 2,\r\n  },\r\n  lev2: {\r\n    rows: 2,\r\n    cols: 3,\r\n  },\r\n  lev3: {\r\n    rows: 3,\r\n    cols: 4,\r\n  },\r\n  lev4: {\r\n    rows: 4,\r\n    cols: 4,\r\n  },\r\n  lev5: {\r\n    rows: 5,\r\n    cols: 4,\r\n  },\r\n  lev6: {\r\n    rows: 6,\r\n    cols: 4,\r\n  },\r\n};\r\n\r\nexport default levelsData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport levelsData from \"./../data/levelsData\";\r\n\r\nfunction Game() {\r\n  const { level } = useParams();\r\n  const [cards, setCards] = useState([]);\r\n  const [clicks, setClicks] = useState(0);\r\n  const { rows, cols } = levelsData[level];\r\n  const cardsAmount = rows * cols;\r\n\r\n  useEffect(() => {\r\n    init();\r\n    setTimeout(() => {\r\n      setCards((prevState) =>\r\n        prevState.map((card) => ({\r\n          ...card,\r\n          visible: false,\r\n          clickHandler: true,\r\n        }))\r\n      );\r\n    }, 1000);\r\n  }, []);\r\n\r\n  const init = () => {\r\n    const newCards = generateCards();\r\n    appendColorsToCards(newCards);\r\n    setCards(newCards);\r\n  };\r\n\r\n  const generateCards = () => {\r\n    const result = [];\r\n    for (let i = 0; i < cardsAmount; i++) {\r\n      result.push({\r\n        id: i,\r\n        visible: true,\r\n        clickHandler: false,\r\n        active: true,\r\n        background: \"\",\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const appendColorsToCards = (cards) => {\r\n    let ids = cards;\r\n    for (let i = 0; i < cardsAmount / 2; i++) {\r\n      const randomCard1 = Math.floor(Math.random() * ids.length);\r\n      const randomCardId1 = ids[randomCard1].id;\r\n      ids = ids.filter((item, index) => index !== randomCard1);\r\n      const randomCard2 = Math.floor(Math.random() * ids.length);\r\n      const randomCardId2 = ids[randomCard2].id;\r\n      ids = ids.filter((item, index) => index !== randomCard2);\r\n      const color = generateColor();\r\n      cards[randomCardId1].background = color;\r\n      cards[randomCardId2].background = color;\r\n    }\r\n  };\r\n\r\n  const generateColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  };\r\n\r\n  const clickHandler = (e) => {\r\n    const currentClicks = clicks + 1;\r\n    const newCardsState = cards.map((card) => {\r\n      if (card.id == e.target.id) {\r\n        return { ...card, visible: true, clickHandler: false };\r\n      } else {\r\n        return card;\r\n      }\r\n    });\r\n\r\n    if (currentClicks === 1 || currentClicks === 2) {\r\n      setClicks(currentClicks);\r\n      setCards(newCardsState);\r\n      currentClicks === 2 && checkAreCardsEqual(newCardsState);\r\n    }\r\n  };\r\n\r\n  const checkAreCardsEqual = (newCardsState) => {\r\n    const visibleCards = newCardsState.filter((card) => card.visible);\r\n    const result =\r\n      visibleCards[0].background === visibleCards[1].background ? true : false;\r\n\r\n    setTimeout(() => {\r\n      setCards(\r\n        newCardsState.map((card) => {\r\n          if (card.visible && result) {\r\n            return {\r\n              ...card,\r\n              clickHandler: false,\r\n              visible: false,\r\n              active: false,\r\n            };\r\n          } else if (card.visible && !result) {\r\n            return { ...card, clickHandler: true, visible: false };\r\n          } else {\r\n            return card;\r\n          }\r\n        })\r\n      );\r\n      setClicks(0);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {cards.map((card) => (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          size={cols}\r\n          bgColor={\r\n            !card.active\r\n              ? \"rgba(0, 0, 0, 0.7)\"\r\n              : !card.visible\r\n              ? \"gray\"\r\n              : card.background\r\n          }\r\n          className={card.visible && \"visible\"}\r\n          onClick={card.clickHandler ? clickHandler : undefined}\r\n        />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  cursor: pointer;\r\n  flex-basis: ${(props) => 100 / props.size}%;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  border: 4px solid white;\r\n  border-radius: 10px;\r\n  transform: rotate3d(0, 1, 0, 0deg);\r\n  transition: transform 0.4s linear, background-color 0s linear 0.2s;\r\n  background-color: ${(props) => props.bgColor};\r\n  &.visible {\r\n    transform: rotate3d(0, 1, 0, 180deg);\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/levelselectscreen.a4eb90f8.png\";","export default __webpack_public_path__ + \"static/media/levelicon.c089b3bb.png\";","export default __webpack_public_path__ + \"static/media/leveliconhover.2e9da042.png\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport withScale from \"./withScale\";\r\nimport LevelSelectScreen from \"./../assets/levelselectscreen.png\";\r\nimport LevelIcon from \"./../assets/levelicon.png\";\r\nimport LevelIconHover from \"./../assets/leveliconhover.png\";\r\n\r\nconst SelectLevel = ({ player, scale }) => {\r\n  const history = useHistory();\r\n\r\n  const goToGame = (e) => {\r\n    history.push(`/React-Memory-Game/game/${e.target.id}`);\r\n  };\r\n  return (\r\n    <Page>\r\n      <Wrapper scale={scale}>\r\n        <Levels amount={Math.ceil(player.progress.length / 2)}>\r\n          {player.progress.map((level) => (\r\n            <Button\r\n              key={level.level}\r\n              id={`lev${level.level}`}\r\n              onClick={goToGame}\r\n            >\r\n              {level.level}\r\n            </Button>\r\n          ))}\r\n        </Levels>\r\n      </Wrapper>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default withScale(SelectLevel);\r\n\r\nconst Page = styled.div`\r\n  background: radial-gradient(rgba(43, 55, 96, 1), rgba(11, 16, 35, 1));\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1273px;\r\n  height: 716px;\r\n  transform: ${({ scale }) => `translate(-50%, -50%) scale(${scale})`};\r\n  background-image: ${`url(${LevelSelectScreen})`};\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Levels = styled.div`\r\n  width: ${(props) => props.amount * 176}px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 60px;\r\n  font-weight: bold;\r\n  color: #af753b;\r\n  text-shadow: 0px 0px 2px black;\r\n  width: 176px;\r\n  height: 176px;\r\n  background-color: transparent;\r\n  background-image: ${`url(${LevelIcon})`};\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background-image 0.2s linear;\r\n  :hover,\r\n  :focus {\r\n    outline: none;\r\n    background-image: ${`url(${LevelIconHover})`};\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport GlobalStyle from \"./GlobalStyles\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Game from \"./Game\";\nimport SelectLevel from \"./SelectLevel\";\n\nconst initialPlayerData = {\n  nickname: \"\",\n  progress: [\n    {\n      level: 1,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 2,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 3,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 4,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 5,\n      passed: false,\n      score: null,\n    },\n    {\n      level: 6,\n      passed: false,\n      score: null,\n    },\n  ],\n};\n\nconst App = () => {\n  const [player, setPlayer] = useState(() => {\n    const data = JSON.parse(localStorage.getItem(\"rmg-user-data\"));\n    return data ? data : initialPlayerData;\n  });\n\n  const setUserData = (nickname) => {\n    const newState = { ...player, nickname };\n    localStorage.setItem(\"rmg-user-data\", JSON.stringify(newState));\n    setPlayer(newState);\n  };\n\n  return (\n    <div className='App'>\n      <Router>\n        <GlobalStyle />\n        <Switch>\n          <Route exact path='/React-Memory-Game'>\n            <Home player={player} setUserData={setUserData} />\n          </Route>\n          <Route exact path='/React-Memory-Game/levels'>\n            <SelectLevel player={player} />\n          </Route>\n          <Route exact path='/React-Memory-Game/game/:level'>\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}